import logging
import os
import datetime

from aiogram import Bot, Dispatcher, executor, types

import keyboards as kb
import exceptions
import exercises
from categories import Categories

logging.basicConfig(level=logging.INFO)

# API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
API_TOKEN = '1202070076:AAHCDBf0bIm4A9xmqRKf5726Ux9EKS0gYok'
# ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")
ACCESS_ID = '545679284'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
now = datetime.datetime.now()

week_day = {0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞',
            3: '—á–µ—Ç–≤–µ—Ä–≥', 4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}

exercise_type = {0: '–≥—Ä—É–¥—å –∏ –±–∏—Ü–µ–ø—Å', 1: '—Å–ø–∏–Ω—É –∏ —Ç—Ä–∏—Ü–µ–ø—Å', 2: '–≥—Ä—É–¥—å –∏ –ø–ª–µ—á–∏', 3: '—Å–ø–∏–Ω—É –∏ –Ω–æ–≥–∏',
                 4: '–≥—Ä—É–¥—å –∏ –Ω–æ–≥–∏', 5: '—Ä–∞—Å—Å–ª–∞–±—å—Å—è, —Å–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π ;)',
                 6: '–º–æ–∑–≥. –ù–µ—Ç –Ω—É –æ—Ç–¥—ã—Ö —Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å? ;)'}


@dp.callback_query_handler(lambda c: c.data == 'start_training')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–ª–æ–∂–∏—Å—å –ø–æ –ø–æ–ª–Ω–æ–π', reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == '/today')
async def process_callback_button1(callback_query: types.CallbackQuery):
    answer_message = exercises.get_today_statistics()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'month')
async def process_callback_button1(callback_query: types.CallbackQuery):
    answer_message = exercises.get_month_statistics()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'last_training')
async def process_callback_button1(callback_query: types.CallbackQuery):
    last_exercises = exercises.last()
    if not last_exercises:
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã –µ—â–µ –Ω–µ –≤–Ω–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö", reply_markup=kb.inline_kb_full)
        return
    last_exercises_rows = [
        f"{exercise.weight} –∫–≥. - {exercise.category_name} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{exercise.user_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for exercise in last_exercises]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚ûï " + "\n\n‚ûï " \
        .join(last_exercises_rows)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'categories')
async def categories_list(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    categories = Categories().get_all_categories()
    answer_message = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\nüîπ " + \
                     ("\nüîπ ".join([c.name + ' - (' + ", ".join(c.aliases) + ')' for c in categories]))
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'help')
async def send_menu(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    week_day_value = datetime.datetime.today().weekday()
    today = week_day[week_day_value]
    exercise_name = exercise_type[week_day_value]
    user_name = callback_query.from_user.first_name
    await bot.send_message(callback_query.from_user.id,
                           f"–ü—Ä–∏–≤–µ—Çüëã, {user_name}!\n"
                           f"C–µ–≥–æ–¥–Ω—è - {today}, –∞ –∑–Ω–∞—á–∏—Ç\n"
                           f"–ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–∞—á–∞—Ç—å {exercise_name}\n\n", reply_markup=kb.markup1)


@dp.message_handler(commands=['start', 'hi', '–ø—Ä–∏–≤–µ—Ç'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    # user_name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Çüëã, {message.from_user.first_name}!\n"
                         "–Ø —Ä–∞–¥ —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏!\n"
                         "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.\n"
                         "–í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º!!!\n\n",
                         reply_markup=kb.markup1)


@dp.message_handler(lambda message: message.text == 'üëã')
async def exercises_plan(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    week_day_value = datetime.datetime.today().weekday()
    today = week_day[week_day_value]
    exercise_name = exercise_type[week_day_value]
    await message.answer(f"C–µ–≥–æ–¥–Ω—è - {today}, –∞ –∑–Ω–∞—á–∏—Ç\n"
                         f"–ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–∞—á–∞—Ç—å {exercise_name}\n\n", reply_markup=kb.inline_kb_full)


@dp.message_handler(lambda message: message.text == '–ú–ï–ù–Æ')
async def exercises_plan(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é"""
    await message.answer('–û–∫, –≤–æ—Ç —Ç–µ–±–µ –º–µ–Ω—é:', reply_markup=kb.inline_kb_full)


@dp.inline_handler(lambda inline_query: True)
async def some_inline_handler(inline_query: types.InlineQuery):
    await inline_query.answer()


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_exercise(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ–± –ø–æ–¥—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    exercises.delete_exercise(row_id)
    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


@dp.message_handler(commands=['month'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–Ω—è—Ç–æ–≥–æ –≤–µ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    answer_message = exercises.get_month_statistics()
    await message.answer(answer_message)


@dp.message_handler()
async def add_exercise(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ–¥—Ö–æ–¥–µ"""
    try:
        exercise = exercises.add_exercise(message)
        print(exercise)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞—á—ë—Ç:\n"
        f"{exercise.weight} –∫–≥ - –Ω–∞ {exercise.reiteration} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - {exercise.category_name}.\n\n"
        f"{exercises.get_today_statistics()}")
    await message.answer(answer_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
