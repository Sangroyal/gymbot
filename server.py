import logging
import os
import datetime

from aiogram import Bot, Dispatcher, executor, types

from categories import Categories
import exceptions
import exercises
import keyboards as kb
from parsers import MessageParser

logging.basicConfig(level=logging.INFO)

# API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
API_TOKEN = '1202070076:AAHCDBf0bIm4A9xmqRKf5726Ux9EKS0gYok'
# ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")
# ACCESS_ID = '545679284'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
categories = Categories()
parser = MessageParser(categories)


@dp.callback_query_handler(lambda c: c.data == 'today')
async def get_today_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_message = exercises.get_today_statistics(user_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'start_training')
async def start_training(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "–í–æ—Ç —á—Ç–æ —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å:",
                           reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'last_training')
async def get_last_training_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    last_exercises = exercises.last(user_id)
    if not last_exercises:
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã –µ—â–µ –Ω–µ –≤–Ω–æ—Å–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö", reply_markup=kb.inline_kb_full)
        return
    last_exercises_rows = [
        f"{exercise.weight} –∫–≥. - {exercise.category_codename} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{exercise.user_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for exercise in last_exercises]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n‚ûï " + "\n\n‚ûï " \
        .join(last_exercises_rows)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'month')
async def get_month_stats(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    answer_message = exercises.get_month_statistics(user_id)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'categories')
async def categories_list(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    all_categories = categories.get_all_categories()
    answer_message = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:\n\nüîπ " + \
                     ("\nüîπ ".join([c.name + ' - (' + ", ".join(c.aliases) + ')' for c in all_categories]))
    await bot.send_message(callback_query.from_user.id, answer_message, reply_markup=kb.inline_kb_full)


@dp.callback_query_handler(lambda c: c.data == 'help')
async def send_menu(callback_query: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await bot.send_message(callback_query.from_user.id,
                           "–ï—Å–ª–∏ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —á—Ç–æ –≥–æ—Ç–æ–≤ –ø–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫,\n"
                           "—Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø–ª–∞–Ω–æ–º –ø–∏—Ç–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É,\n"
                           f"—Ç–æ —Å–º–µ–ª–æ –∂–º–∏ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É\n", reply_markup=kb.screen_keyboard)


@dp.message_handler(commands=['start', 'hi', '–ø—Ä–∏–≤–µ—Ç'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await message.answer(f"–ü—Ä–∏–≤–µ—Çüëã, {message.from_user.first_name}!\n"
                         "–Ø —Ä–∞–¥ —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏!\n"
                         "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º.\n",
                         reply_markup=kb.screen_keyboard)


@dp.message_handler(lambda message: message.text == 'üëã')
async def exercises_plan(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await message.answer(f"C–µ–≥–æ–¥–Ω—è - {exercises.get__week_value()}, –∞ –∑–Ω–∞—á–∏—Ç\n"
                         f"–ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –∫–∞—á–∞—Ç—å {exercises.get_type_exercise_now()}\n\n",
                         reply_markup=kb.inline_kb_full)


@dp.message_handler(lambda message: message.text == '–ú–ï–ù–Æ')
async def menu_text_btn(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é"""
    await message.answer('–û–∫, –≤–æ—Ç —Ç–µ–±–µ –º–µ–Ω—é:', reply_markup=kb.inline_kb_full)


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_exercise(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ–± –ø–æ–¥—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    exercises.delete_exercise(row_id)
    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


@dp.message_handler(commands=['month'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–Ω—è—Ç–æ–≥–æ –≤–µ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    user_id = message.from_user.id
    answer_message = exercises.get_month_statistics(user_id)
    await message.answer(answer_message)


@dp.message_handler()
async def add_exercise(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø–æ–¥—Ö–æ–¥–µ"""
    try:
        user_id = message.from_user.id
        exercise = parser.parse_exercise(message)
        exercises.add_exercise(exercise)
        answer_message = (
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞—á—ë—Ç:\n"
            f"{exercise.weight} –∫–≥ - –Ω–∞ {exercise.repetitions} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - {exercise.category_codename}.\n\n"
            f"{exercises.get_today_statistics(user_id)}")
        await message.answer(answer_message)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
